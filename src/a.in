
global  main
extern scanf
extern printf
extern puts
extern strlen
extern memcpy
extern sscanf
extern sprintf
extern malloc
extern strcmp
    section .bss
stringbuffer:
	resb 256

    section .data
intbuffer:
	dq 0
format1:
	db"%lld",0
format2:
	db"%lld ",10,0
format3:
	db"%s",0
format4:
	db"%s",10,0
format: db  "%lld", 0

    section .text
worka.0:
	push   rbp
	mov    rbp, rsp
	sub    rsp, 0
	mov    r15,  qword[rbp + 16]
	mov    rcx,  r15
	mov    r15,  qword[rbp + 24]
	mov    r11,  r15

	lea    r10,  [rcx+rcx]
	mov    rcx,  r10
	sub    rcx,  r11
	mov    rax,  rcx
	jmp    worka.0.out
	jmp    worka.0.out
worka.0.out:
	leave
	ret
workb.0:
	push   rbp
	mov    rbp, rsp
	sub    rsp, 0
	mov    r15,  qword[rbp + 16]
	mov    r10,  r15
	mov    r15,  qword[rbp + 24]
	mov    r11,  r15

	mov    r15,  r10
	neg    r15
	mov    rcx,  r15
	lea    r10,  [rcx+r11]
	lea    rcx,  [r10+r11]
	mov    rax,  rcx
	jmp    workb.0.out
	jmp    workb.0.out
workb.0.out:
	leave
	ret
workc.0:
	push   rbp
	mov    rbp, rsp
	sub    rsp, 0
	mov    r15,  qword[rbp + 16]
	mov    r9,  r15
	mov    r15,  qword[rbp + 24]
	mov    r11,  r15

	lea    r10,  [r9+r9]
	lea    rcx,  [r10+r9]
	mov    r10,  rcx
	sub    r10,  r11
	mov    rcx,  r10
	sub    rcx,  r11
	mov    rax,  rcx
	jmp    workc.0.out
	jmp    workc.0.out
workc.0.out:
	leave
	ret
main:
	push   rbp
	push   rbp
	mov    rbp, rsp
	sub    rsp, 88
	push   r14
	push   r13
	push   rbx
	push   r12

	mov    r14,  1
	mov    r13,  0
	mov    rbx,  1
	mov    r8,  0
	mov    r9,  1
	mov    r11,  0
	mov    r10,  1
	mov    rcx,  0
	mov    rcx,  1
Catch.3:
	mov    rbx,  rcx
	cmp    rbx,  100000000
	setle   al
	movzx  rax,  al
	mov    rbx,  rax
	cmp    rbx,  1
	je     Catch.4
	jmp    Catch.5
Catch.4:
	push   r8
	push   r9
	push   r11
	push   r10
	push   rcx
	push   r13
	push   r14
	call   worka.0
	add    rsp,  16
	pop    rcx
	pop    r10
	pop    r11
	pop    r9
	pop    r8
	mov    rbx,  rax
	mov    r14,  rbx
	push   r8
	push   r9
	push   r11
	push   r10
	push   rcx
	push   r13
	push   r14
	call   workb.0
	add    rsp,  16
	pop    rcx
	pop    r10
	pop    r11
	pop    r9
	pop    r8
	mov    rbx,  rax
	mov    r13,  rbx
	push   r8
	push   r9
	push   r11
	push   r10
	push   rcx
	push   r13
	push   r14
	call   workc.0
	add    rsp,  16
	pop    rcx
	pop    r10
	pop    r11
	pop    r9
	pop    r8
	mov    r12,  rax
	mov    rbx,  r12
	mov    r15,  r14
	neg    r15
	mov    r12,  r15
	mov    qword[rbp - 8],  r12
	add    qword[rbp - 8],  r13
	mov    r12,  qword[rbp - 8]
	sub    r12,  rbx
	mov    qword[rbp - 16],  r12
	add    qword[rbp - 16],  r8
	mov    r12,  qword[rbp - 16]
	add    r12,  r9
	mov    r8,  r12
	sub    r8,  r11
	lea    r12,  [r8+r10]
	mov    r8,  r12
	lea    r12,  [r14+r13]
	mov    qword[rbp - 24],  r12
	add    qword[rbp - 24],  rbx
	mov    r12,  qword[rbp - 24]
	sub    r12,  r8
	mov    qword[rbp - 32],  r12
	sub    qword[rbp - 32],  r9
	mov    r9,  qword[rbp - 32]
	sub    r9,  r11
	lea    r12,  [r9+r10]
	mov    r9,  r12
	mov    qword[rbp - 40],  r14
	add    qword[rbp - 40],  r13
	mov    r12,  qword[rbp - 40]
	sub    r12,  rbx
	mov    qword[rbp - 48],  r12
	add    qword[rbp - 48],  r8
	mov    r12,  qword[rbp - 48]
	sub    r12,  r9
	mov    qword[rbp - 56],  r12
	add    qword[rbp - 56],  r11
	mov    r12,  qword[rbp - 56]
	sub    r12,  r10
	mov    r11,  r12
	mov    qword[rbp - 64],  r14
	sub    qword[rbp - 64],  r13
	mov    r12,  qword[rbp - 64]
	sub    r12,  rbx
	mov    qword[rbp - 72],  r12
	sub    qword[rbp - 72],  r8
	mov    r12,  qword[rbp - 72]
	add    r12,  r9
	mov    qword[rbp - 80],  r12
	add    qword[rbp - 80],  r11
	mov    r12,  qword[rbp - 80]
	add    r12,  r10
	mov    r10,  r12
	mov    qword[rbp - 88],  r14
	add    qword[rbp - 88],  r13
	mov    r12,  qword[rbp - 88]
	add    r12,  rbx
	lea    rbx,  [r12+r8]
	lea    r12,  [rbx+r9]
	lea    rbx,  [r12+r11]
	lea    r12,  [rbx+r10]
	mov    rbx,  r12
	cmp    rbx,  100000000
	setg   al
	movzx  rax,  al
	mov    rbx,  rax
	cmp    rbx,  1
	je     Catch.1
	jmp    Catch.2
Catch.1:
	mov    r14,  123
	mov    r13,  456
	mov    rbx,  789
	mov    r8,  155
	mov    r9,  123
	mov    r11,  55
	mov    r10,  32
Catch.2:
Catch.6:
	mov    rbx,  rcx
	mov    rcx,  rcx
	add    rcx,  1
	jmp    Catch.3
Catch.5:
	push   r8
	push   r9
	push   r11
	push   r10
	push   rcx
	push   rbp
	push   r10
	call   toString.0
	add    rsp,  8
	pop    rbp
	pop    rcx
	pop    r10
	pop    r11
	pop    r9
	pop    r8
	mov    r11,  rax
	push   r8
	push   r9
	push   r11
	push   r10
	push   rcx
	push   rbp
	push   r11
	call   println.0
	add    rsp,  8
	pop    rbp
	pop    rcx
	pop    r10
	pop    r11
	pop    r9
	pop    r8
	mov    rcx,  rax
	mov    rax,  0
	jmp    main.0.out
	jmp    main.0.out
main.0.out:
	pop   r12
	pop   rbx
	pop   r13
	pop   r14
	leave
	pop    rbp
	ret
getInt.0:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rax,0
	mov rdi,format1
	mov rsi,intbuffer
	call scanf
	mov rax,[intbuffer]
	mov rsp,rbp
	pop rbp
	ret

printInt.0:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,rdi
	mov rax,0
	mov rdi,format2
	call printf
	mov rsp,rbp
	pop rbp
	ret

size.0:
	push rbp
	mov rbp,rsp
	mov rdi, qword[rbp + 16]
	mov rax,[rdi-8]
	leave
	ret

print.0:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rax,0
	mov rsi,rdi
	mov rdi,format3
	call printf
	mov rsp,rbp
	pop rbp
	ret

println.0:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	call puts
	leave
	ret


transtring.0:

	push rbp
	mov rbp,rsp
	call strlen
	push rdi
	mov rdi,rax
	push rdi
	add rdi,9
	call malloc
	pop rdi
	mov [rax],rdi
	add rax,8
	mov rdx,rdi
	add rdx,1
	mov rdi,rax
	pop rsi
	sub rsp,8
	push rax
	call memcpy
	pop rax
	mov rsp,rbp
	pop rbp
	ret

getString.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rax,0
	mov rdi,format3
	mov rsi,stringbuffer
	call scanf
	mov rdi,stringbuffer
	call transtring.0
	mov rsp,rbp
	pop rbp
	ret

toString.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rdx,rdi
	mov rax,0
	mov rdi,stringbuffer
	mov rsi,format1
	call sprintf
	mov rdi,stringbuffer
	call transtring.0
	mov rsp,rbp
	pop rbp
	ret

length.1:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rax,[rdi-8]
	leave
	ret

substring.1:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 32]
	mov rsi,qword[rbp + 16]
	mov rdx,qword[rbp + 24]
	push rdi
	push rsi
	mov rdi,rdx
	sub rdi,rsi
	add rdi,1
	push rdi
	add rdi,9
	call malloc
	pop rdx
	mov [rax],rdx
	add rax,8
	pop rsi
	pop rdi
	add rsi,rdi
	mov rdi,rax
	push rdx
	push rax
	call memcpy
	pop rax
	pop rdx
	mov qword[rax+rdx],0
	mov rsp,rbp
	pop rbp
	ret

parseInt.1:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,format1
	mov rdx,intbuffer
	mov rax,0
	call sscanf
	mov rax,[intbuffer]
	leave
	ret

ord.1:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 24]
	mov rsi,qword[rbp + 16]
	mov rax,0
	mov al,byte[rdi+rsi]
	leave
	ret

Sadd.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	push rsi
	mov rsi,rdi
	mov rdi,stringbuffer
	mov rdx,[rsi-8]
	push rdx
	call memcpy
	pop rdi
	pop rsi
	add rdi,stringbuffer
	mov rdx,[rsi-8]
	add rdx,1
	call memcpy
	mov rdi,stringbuffer
	call transtring.0
	mov rsp,rbp
	pop rbp
	ret

Slt.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	setl dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

Sle.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	setle dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

Sgt.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	setg dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

Sge.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	setge dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

Seq.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	sete dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

Sne.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	setne dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret
