
global  main
extern scanf
extern printf
extern puts
extern strlen
extern memcpy
extern sscanf
extern sprintf
extern malloc
extern strcmp
    section .bss
stringbuffer:
	resb 256
globel.1: resq 1

    section .data
intbuffer:
	dq 0
format1:
	db"%lld",0
format2:
	db"%lld ",10,0
format3:
	db"%s",0
format4:
	db"%s",10,0
format: db  "%lld", 0

    section .text
main:
	push   rbp
	mov    rbp, rsp
	sub    rsp, 0

	mov    r14,  2

	mov    r13,  3

	push   r14
	push   r13
	push   rbx
	push   r8
	mov    rsi,  qword[globel.1]
	push   rsi
	push   r13
	push   r14
	call   func1.4
	add    rsp,  24
	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	mov    rbx,  rax
	mov    r13,  0

	mov    rbx,  1

	push   r14
	push   r13
	push   rbx
	push   r8
	mov    rsi,  qword[globel.1]
	push   rsi
	push   rbx
	push   r13
	call   set.4
	add    rsp,  24
	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	mov    r8,  rax
	mov    r14,  1

	mov    r13,  0

	push   r14
	push   r13
	push   rbx
	push   r8
	push   r8
	push   r13
	push   r14
	call   set.4
	add    rsp,  24
	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	mov    rbx,  rax
	push   r14
	push   r13
	push   rbx
	push   r8
	mov    rsi,  qword[globel.1]
	push   rsi
	call   getThis.4
	add    rsp,  8
	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	mov    rbx,  rax
	push   r14
	push   r13
	push   rbx
	push   r8
	push   rbp
	mov    rsi,  qword[globel.1]
	push   rsi
	push   rbx
	call   copy.4
	add    rsp,  16
	pop    rbp
	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	mov    r14,  rax
	push   r14
	push   r13
	push   rbx
	push   r8
	mov    rsi,  qword[globel.1]
	push   rsi
	call   getThis.4
	add    rsp,  8
	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	mov    rbx,  rax
	push   r14
	push   r13
	push   rbx
	push   r8
	push   rbx
	call   getThis.4
	add    rsp,  8
	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	mov    r13,  rax
	push   r14
	push   r13
	push   rbx
	push   r8
	push   rbp
	push   r14
	push   r13
	call   copy.4
	add    rsp,  16
	pop    rbp
	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	mov    rbx,  rax
	mov    rbx,  0

	mov    rax,  rbx
	jmp    main.0.out
	jmp    main.0.out
main.0.out:
	leave
	ret
func1.4:
	push   rbp
	mov    rbp, rsp
	sub    rsp, 0
	mov    r15,  qword[rbp + 16]
	mov    r14,  r15
	mov    r15,  qword[rbp + 24]
	mov    r13,  r15
	mov    r15,  qword[rbp + 32]
	mov    rbx,  r15

	mov    r8,  qword[rbx + 8]
	mov    rax,  r8
	imul   rax,  r14
	mov    r8,  rax
	mov    r14,  qword[rbx + 16]
	mov    rax,  r14
	imul   rax,  r13
	mov    r14,  rax
	push   rbx
	push   r14
	push   r8
	push   r13
	push   rbx
	push   r14
	push   r8
	call   func2.4
	add    rsp,  24
	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r8,  r15

	pop    r15
	mov    r14,  r15

	pop    r15
	mov    rbx,  r15

	mov    r13,  rax
	jmp    func1.4.out
func1.4.out:
	leave
	ret
func2.4:
	push   rbp
	mov    rbp, rsp
	sub    rsp, 0
	mov    r15,  qword[rbp + 16]
	mov    r13,  r15
	mov    r15,  qword[rbp + 24]
	mov    r13,  r15
	mov    r15,  qword[rbp + 32]
	mov    rbx,  r15

	mov    r8,  qword[rbx + 8]
	mov    rax,  r8
	imul   rax,  qword[rbx + 8]
	mov    r8,  rax
	mov    r14,  qword[rbx + 16]
	mov    rax,  r14
	imul   rax,  qword[rbx + 16]
	mov    r14,  rax
	push   rbx
	push   r8
	push   r14
	push   r13
	push   rbx
	push   r14
	push   r8
	call   func1.4
	add    rsp,  24
	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	mov    r13,  rax
	jmp    func2.4.out
func2.4.out:
	leave
	ret
set.4:
	push   rbp
	mov    rbp, rsp
	sub    rsp, 0
	mov    r15,  qword[rbp + 16]
	mov    r14,  r15
	mov    r15,  qword[rbp + 24]
	mov    r13,  r15
	mov    r15,  qword[rbp + 32]
	mov    rbx,  r15

	push   rbx
	push   r8
	push   r9
	push   r14
	push   r13
	push   rbx
	mov    rsi,  qword[rbx + 16]
	push   rsi
	mov    rsi,  qword[rbx + 8]
	push   rsi
	call   set.4
	add    rsp,  24
	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	pop    r15
	mov    r9,  r15

	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	mov    r8,  rax
	push   rbx
	push   r8
	push   r9
	push   r14
	push   r13
	push   r8
	mov    rsi,  qword[rbx + 16]
	push   rsi
	mov    rsi,  qword[rbx + 8]
	push   rsi
	call   set.4
	add    rsp,  24
	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	pop    r15
	mov    r9,  r15

	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	mov    r9,  rax
	push   rbx
	push   r8
	push   r9
	push   r14
	push   r13
	push   r9
	push   r13
	push   r14
	call   set.4
	add    rsp,  24
	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	pop    r15
	mov    r9,  r15

	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	mov    r8,  rax
	push   rbx
	push   r8
	push   r9
	push   r14
	push   r13
	push   r8
	call   getThis.4
	add    rsp,  8
	pop    r15
	mov    r13,  r15

	pop    r15
	mov    r14,  r15

	pop    r15
	mov    r9,  r15

	pop    r15
	mov    r8,  r15

	pop    r15
	mov    rbx,  r15

	mov    rbx,  rax
	mov    rax,  rbx
	jmp    set.4.out
	jmp    set.4.out
set.4.out:
	leave
	ret
copy.4:
	push   rbp
	mov    rbp, rsp
	sub    rsp, 0
	mov    r15,  qword[rbp + 16]
	mov    r13,  r15
	mov    r15,  qword[rbp + 24]
	mov    rbx,  r15

	mov    rax,  rbx
	jmp    copy.4.out
	jmp    copy.4.out
copy.4.out:
	leave
	ret
getThis.4:
	push   rbp
	mov    rbp, rsp
	sub    rsp, 0
	mov    r15,  qword[rbp + 16]
	mov    rbx,  r15

	push   rbx
	push   r13
	push   r14
	push   rbx
	call   getThis.4
	add    rsp,  8
	pop    r15
	mov    r14,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    rbx,  r15

	mov    r13,  rax
	push   rbx
	push   r13
	push   r14
	push   r13
	call   getThis.4
	add    rsp,  8
	pop    r15
	mov    r14,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    rbx,  r15

	mov    r14,  rax
	push   rbx
	push   r13
	push   r14
	push   r14
	call   getThis.4
	add    rsp,  8
	pop    r15
	mov    r14,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    rbx,  r15

	mov    r13,  rax
	push   rbx
	push   r13
	push   r14
	push   r13
	call   getThis.4
	add    rsp,  8
	pop    r15
	mov    r14,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    rbx,  r15

	mov    r14,  rax
	push   rbx
	push   r13
	push   r14
	push   rbp
	push   r14
	push   rbx
	call   copy.4
	add    rsp,  16
	pop    rbp
	pop    r15
	mov    r14,  r15

	pop    r15
	mov    r13,  r15

	pop    r15
	mov    rbx,  r15

	mov    r13,  rax
	mov    rax,  r13
	jmp    getThis.4.out
	jmp    getThis.4.out
getThis.4.out:
	leave
	ret
getInt.0:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rax,0
	mov rdi,format1
	mov rsi,intbuffer
	call scanf
	mov rax,[intbuffer]
	mov rsp,rbp
	pop rbp
	ret

printInt.0:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,rdi
	mov rax,0
	mov rdi,format2
	call printf
	mov rsp,rbp
	pop rbp
	ret

size.0:
	push rbp
	mov rbp,rsp
	mov rdi, qword[rbp + 16]
	mov rax,[rdi-8]
	leave
	ret

print.0:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rax,0
	mov rsi,rdi
	mov rdi,format3
	call printf
	mov rsp,rbp
	pop rbp
	ret

println.0:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	call puts
	leave
	ret


transtring.0:

	push rbp
	mov rbp,rsp
	call strlen
	push rdi
	mov rdi,rax
	push rdi
	add rdi,9
	call malloc
	pop rdi
	mov [rax],rdi
	add rax,8
	mov rdx,rdi
	add rdx,1
	mov rdi,rax
	pop rsi
	sub rsp,8
	push rax
	call memcpy
	pop rax
	mov rsp,rbp
	pop rbp
	ret

getString.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rax,0
	mov rdi,format3
	mov rsi,stringbuffer
	call scanf
	mov rdi,stringbuffer
	call transtring.0
	mov rsp,rbp
	pop rbp
	ret

toString.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rdx,rdi
	mov rax,0
	mov rdi,stringbuffer
	mov rsi,format1
	call sprintf
	mov rdi,stringbuffer
	call transtring.0
	mov rsp,rbp
	pop rbp
	ret

length.1:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rax,[rdi-8]
	leave
	ret

substring.1:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 32]
	mov rsi,qword[rbp + 16]
	mov rdx,qword[rbp + 24]
	push rdi
	push rsi
	mov rdi,rdx
	sub rdi,rsi
	add rdi,1
	push rdi
	add rdi,9
	call malloc
	pop rdx
	mov [rax],rdx
	add rax,8
	pop rsi
	pop rdi
	add rsi,rdi
	mov rdi,rax
	push rdx
	push rax
	call memcpy
	pop rax
	pop rdx
	mov qword[rax+rdx],0
	mov rsp,rbp
	pop rbp
	ret

parseInt.1:
	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,format1
	mov rdx,intbuffer
	mov rax,0
	call sscanf
	mov rax,[intbuffer]
	leave
	ret

ord.1:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 24]
	mov rsi,qword[rbp + 16]
	mov rax,0
	mov al,byte[rdi+rsi]
	leave
	ret

Sadd.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	push rsi
	mov rsi,rdi
	mov rdi,stringbuffer
	mov rdx,[rsi-8]
	push rdx
	call memcpy
	pop rdi
	pop rsi
	add rdi,stringbuffer
	mov rdx,[rsi-8]
	add rdx,1
	call memcpy
	mov rdi,stringbuffer
	call transtring.0
	mov rsp,rbp
	pop rbp
	ret

Slt.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	setl dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

Sle.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	setle dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

Sgt.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	setg dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

Sge.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	setge dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

Seq.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	sete dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

Sne.0:

	push rbp
	mov rbp,rsp
	mov rdi,qword[rbp + 16]
	mov rsi,qword[rbp + 24]
	call strcmp
	mov rdi,0
	cmp rax,0
	setne dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret
